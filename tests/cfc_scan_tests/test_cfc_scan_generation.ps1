# Test CFC Scan Generation
# Tests the generate_cfc_scan_config.ps1 script (CFC-based version)

param(
    [switch]$Verbose,
    [switch]$Help
)

if ($Help) {
    Write-Host "Test CFC Scan Generation" -ForegroundColor Cyan
    Write-Host "========================" -ForegroundColor Cyan
    Write-Host "Tests the generate_cfc_scan_config.ps1 script (CFC-based version)" -ForegroundColor White
    Write-Host ""
    Write-Host "Parameters:" -ForegroundColor Yellow
    Write-Host "  -Verbose    Show detailed output" -ForegroundColor White
    Write-Host "  -Help       Show this help" -ForegroundColor White
    exit
}

# Test Configuration
$scriptPath = "D:\GIT\farcry\Cursor\FKmermaid\src\powershell"
$configPath = "D:\GIT\farcry\Cursor\FKmermaid\config"
$testResultsPath = "D:\GIT\farcry\Cursor\FKmermaid\tests\results"

# Create results directory if it doesn't exist
if (-not (Test-Path $testResultsPath)) {
    New-Item -ItemType Directory -Path $testResultsPath -Force | Out-Null
}

Write-Host "üß™ Testing CFC Scan Generation" -ForegroundColor Cyan
Write-Host "=============================" -ForegroundColor Cyan

# Test 1: Basic CFC Scan Generation
Write-Host "`nüìã Test 1: Basic CFC Scan Generation" -ForegroundColor Yellow

# Backup original config
$originalConfig = "$configPath\cfc_scan_config.json"
$backupConfig = "$configPath\cfc_scan_config.json.test_backup"

if (Test-Path $originalConfig) {
    Copy-Item $originalConfig $backupConfig -Force
    Write-Host "‚úÖ Backed up original config" -ForegroundColor Green
}

try {
    # Run the CFC scan generation
    $result = & "$scriptPath\generate_cfc_scan_config.ps1" 2>&1
    
    # The script may return non-zero exit code but still work correctly
    # We'll check the actual results instead of relying on exit code
    Write-Host "‚úÖ CFC scan generation completed" -ForegroundColor Green
    
    # Test 2: Verify Expected Outputs
    Write-Host "`nüìã Test 2: Verify Expected Outputs" -ForegroundColor Yellow
    
    if (Test-Path $originalConfig) {
        $config = Get-Content $originalConfig | ConvertFrom-Json
        
            # Expected values based on new explicit scan architecture
    $expectedEntityCount = 219  # Correct count after guide.cfc exclusion
        $expectedDirectFKCount = 0  # Not generated by config script
        $expectedExclusions = @("farFilter", "farTask", "farTaskDef", "address", "participant", "module", "moduleDef", "ruleActivityDefListing", "ruleImageGallerySlick", "shopItem", "orderItem", "orderMaster", "promotion")
        Write-Host "üìä Entity Count: $($config.entityConstraints.knownTables.Count) (Expected: $expectedEntityCount)" -ForegroundColor White

        Write-Host "üìä Direct FK Count: $($config.directFK.Count) (Expected: $expectedDirectFKCount)" -ForegroundColor White
        if ($config.entityConstraints.knownTables.Count -eq $expectedEntityCount) {
            Write-Host "‚úÖ Entity count matches expected" -ForegroundColor Green
        } else {
            Write-Host "‚ùå Entity count mismatch" -ForegroundColor Red
            $difference = $config.entityConstraints.knownTables.Count - $expectedEntityCount
            if ($difference -gt 0) {
                Write-Host "   üìà Found $difference more entities than expected" -ForegroundColor Yellow
                Write-Host "   üí° Consider: Recent additions to exclusions.json or new CFC files?" -ForegroundColor Cyan
            } else {
                Write-Host "   üìâ Found $([Math]::Abs($difference)) fewer entities than expected" -ForegroundColor Yellow
                Write-Host "   üí° Consider: Recent removals from exclusions.json or deleted CFC files?" -ForegroundColor Cyan
            }
            Write-Host "   üîß Update expectedEntityCount in this test file to match current reality" -ForegroundColor Cyan
        }
        
        # Check exclusions
        $missingExclusions = @()
        foreach ($exclusion in $expectedExclusions) {
            if ($config.scanSettings.excludeFiles -notcontains "$exclusion.cfc") {
                $missingExclusions += $exclusion
            }
        }
        
        if ($missingExclusions.Count -eq 0) {
            Write-Host "‚úÖ All expected exclusions present" -ForegroundColor Green
        } else {
            Write-Host "‚ùå Missing exclusions: $($missingExclusions -join ', ')" -ForegroundColor Red
        }
        
        # Save test results
        $testResult = @{
            TestName = "CFC Scan Generation"
            Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            EntityCount = $config.entityConstraints.knownTables.Count
            ExpectedEntityCount = $expectedEntityCount
            DirectFKCount = $config.directFK.Count
            ExpectedDirectFKCount = $expectedDirectFKCount
            ExclusionsPresent = ($missingExclusions.Count -eq 0)
            MissingExclusions = $missingExclusions
            Success = ($config.entityConstraints.knownTables.Count -eq $expectedEntityCount -and $missingExclusions.Count -eq 0)
        }
        
        $testResult | ConvertTo-Json | Out-File "$testResultsPath\cfc_scan_test_result.json"
        
    } else {
        Write-Host "‚ùå Config file not found" -ForegroundColor Red
    }
    
} finally {
    # Restore original config
    if (Test-Path $backupConfig) {
        Copy-Item $backupConfig $originalConfig -Force
        Remove-Item $backupConfig -Force
        Write-Host "‚úÖ Restored original config" -ForegroundColor Green
    }
}

Write-Host "`nüèÅ CFC Scan Generation Test Complete" -ForegroundColor Cyan

# Set exit code based on test success
if ($testResult.Success) {
    Write-Host "‚úÖ Test PASSED" -ForegroundColor Green
    exit 0
} else {
    Write-Host "‚ùå Test FAILED" -ForegroundColor Red
    exit 1
}